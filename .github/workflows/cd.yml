name: CD

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Gradle Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Set up environment variables
      run: |
        echo ${{ secrets.ENVFILE }} > .env
    
    - name: Set up firebase service account
      run: |
        echo ${{ secrets.FIREBASE_SERVICE_ACCOUNT }} > src/main/resources/firebase-service-account.json

    - name: Build with Gradle
      run: ./gradlew bootJar

    - name: Find Spring Boot JAR
      id: find-jar
      run: |
        # Find the Spring Boot JAR (exclude plain JAR)
        JAR_FILE=$(find build/libs -name "core-server-*.jar" -not -name "*-plain.jar" | head -1)
        if [ -z "$JAR_FILE" ]; then
          echo "Error: Spring Boot JAR not found"
          exit 1
        fi
        echo "jar_file=$JAR_FILE" >> $GITHUB_OUTPUT
        echo "Found JAR file: $JAR_FILE"

    - name: Deploy to Server
      uses: easingthemes/ssh-deploy@v5.1.0
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
        SOURCE: ${{ steps.find-jar.outputs.jar_file }}
        TARGET: "${{ secrets.TARGET_PATH }}/core-server.jar"
        SCRIPT_BEFORE: |
            pm2 stop nodgu-server
        SCRIPT_AFTER: |
            pm2 restart nodgu-server